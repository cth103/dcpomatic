#
#    Copyright (C) 2012-2022 Carl Hetherington <cth@carlh.net>
#
#    This file is part of DCP-o-matic.
#
#    DCP-o-matic is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    DCP-o-matic is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with DCP-o-matic.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import subprocess
import shlex
import glob
from waflib import Logs
import i18n

sources = """
          about_dialog.cc
          audio_backend.cc
          audio_dialog.cc
          audio_gain_dialog.cc
          audio_mapping_view.cc
          audio_panel.cc
          audio_plot.cc
          auto_crop_dialog.cc
          barco_alchemy_certificate_panel.cc
          batch_job_view.cc
          certificate_chain_editor.cc
          check_box.cc
          christie_certificate_panel.cc
          cinema_dialog.cc
          closed_captions_dialog.cc
          colour_conversion_editor.cc
          config_dialog.cc
          config_move_dialog.cc
          confirm_kdm_email_dialog.cc
          content_advanced_dialog.cc
          content_colour_conversion_dialog.cc
          content_menu.cc
          content_panel.cc
          content_properties_dialog.cc
          content_sub_panel.cc
          content_timeline.cc
          content_timeline_atmos_view.cc
          content_timeline_audio_view.cc
          content_timeline_dialog.cc
          content_timeline_text_view.cc
          content_timeline_video_view.cc
          content_timeline_view.cc
          content_version_dialog.cc
          content_view.cc
          controls.cc
          credentials_download_certificate_panel.cc
          custom_scale_dialog.cc
          dcp_referencing_dialog.cc
          dcp_panel.cc
          dcp_timeline.cc
          dcp_timeline_dialog.cc
          dcp_timeline_reel_marker_view.cc
          dcp_text_track_dialog.cc
          dcpomatic_button.cc
          dcpomatic_choice.cc
          dcpomatic_spin_ctrl.cc
          dir_dialog.cc
          dir_picker_ctrl.cc
          dkdm_dialog.cc
          dkdm_output_panel.cc
          dolby_doremi_certificate_panel.cc
          download_certificate_dialog.cc
          download_certificate_panel.cc
          drive_wipe_warning_dialog.cc
          email_dialog.cc
          email_preferences_page.cc
          export_subtitles_dialog.cc
          export_video_file_dialog.cc
          extra_kdm_email_dialog.cc
          file_dialog.cc
          file_picker_ctrl.cc
          film_editor.cc
          film_name_location_dialog.cc
          film_viewer.cc
          filter_dialog.cc
          focus_manager.cc
          fonts_dialog.cc
          full_config_dialog.cc
          full_language_tag_dialog.cc
          gain_calculator_dialog.cc
          gdc_certificate_panel.cc
          gl_video_view.cc
          hints_dialog.cc
          html_dialog.cc
          image_sequence_dialog.cc
          invalid_certificate_period_dialog.cc
          interop_metadata_dialog.cc
          job_manager_view.cc
          job_view.cc
          job_view_dialog.cc
          kdm_advanced_dialog.cc
          kdm_config_dialog.cc
          kdm_cpl_panel.cc
          kdm_dialog.cc
          kdm_email_preferences_page.cc
          kdm_output_panel.cc
          kdm_timing_panel.cc
          keys_preferences_page.cc
          language_subtag_panel.cc
          language_tag_dialog.cc
          language_tag_widget.cc
          load_config_from_zip_dialog.cc
          locations_preferences_page.cc
          kdm_choice.cc
          make_chain_dialog.cc
          markers.cc
          markers_dialog.cc
          markers_panel.cc
          message_dialog.cc
          metadata_dialog.cc
          move_to_dialog.cc
          nag_dialog.cc
          name_format_editor.cc
          new_dkdm_folder_dialog.cc
          normal_job_view.cc
          paste_dialog.cc
          password_entry.cc
          player_config_dialog.cc
          player_information.cc
          player_stress_tester.cc
          playhead_to_timecode_dialog.cc
          playhead_to_frame_dialog.cc
          playlist_controls.cc
          playlist_editor_config_dialog.cc
          question_dialog.cc
          rating_dialog.cc
          qube_certificate_panel.cc
          recipients_panel.cc
          recipient_dialog.cc
          recreate_chain_dialog.cc
          region_subtag_dialog.cc
          region_subtag_widget.cc
          repeat_dialog.cc
          report_problem_dialog.cc
          rename_template_dialog.cc
          rgba_colour_picker.cc
          save_template_dialog.cc
          screen_dialog.cc
          screens_panel.cc
          self_dkdm_dialog.cc
          send_test_email_dialog.cc
          server_dialog.cc
          servers_list_dialog.cc
          short_kdm_output_panel.cc
          simple_video_view.cc
          smpte_metadata_dialog.cc
          sound_preferences_page.cc
          standard_controls.cc
          static_text.cc
          subtag_list_ctrl.cc
          subtitle_appearance_dialog.cc
          suspender.cc
          system_font_dialog.cc
          system_information_dialog.cc
          table_dialog.cc
          tall_kdm_output_panel.cc
          templates_dialog.cc
          text_panel.cc
          text_view.cc
          time_picker.cc
          timer_display.cc
          timecode.cc
          timeline.cc
          timeline_content_view.cc
          timeline_labels_view.cc
          timeline_reels_view.cc
          timeline_time_axis_view.cc
          timing_panel.cc
          try_unmount_dialog.cc
          update_dialog.cc
          verify_dcp_dialog.cc
          verify_dcp_progress_panel.cc
          verify_dcp_result_panel.cc
          video_panel.cc
          video_view.cc
          video_waveform_dialog.cc
          video_waveform_plot.cc
          window_metrics.cc
          wx_signal_manager.cc
          wx_util.cc
          wx_variant.cc
          """

def configure(conf):

    wx_libs = 'core,richtext,adv,html,xml,propgrid'

    if conf.options.wx_config is not None:
        wx_config = conf.options.wx_config
        conf.check_cfg(msg='Checking for wxWidgets using %s' % wx_config,
                       package='',
                       path=wx_config,
                       args='--cppflags --cxxflags --libs %s --gl-libs' % wx_libs,
                       uselib_store='WXWIDGETS',
                       mandatory=True)
    else:
        try:
            wx_config = '/usr/lib64/wx/config/gtk2-unicode-3.0'
            conf.check_cfg(msg='Checking for wxWidgets using gtk2-unicode-3.0',
                           package='',
                           path=wx_config,
                           args='--cppflags --cxxflags --libs %s --gl-libs' % wx_libs,
                           uselib_store='WXWIDGETS',
                           mandatory=True)
        except:
            try:
                wx_config = 'wx-config-3.0-gtk2'
                conf.check_cfg(msg='Checking for wxWidgets using wx-config-3.0-gtk2',
                               package='',
                               path=wx_config,
                               args='--cppflags --cxxflags --libs %s --gl-libs' % wx_libs,
                               uselib_store='WXWIDGETS',
                               mandatory=True)
            except:
                wx_config = 'wx-config'
                conf.check_cfg(msg='Checking for wxWidgets using wx-config',
                               package='',
                               path=wx_config,
                               args='--cppflags --cxxflags --libs %s --gl-libs' % wx_libs,
                               uselib_store='WXWIDGETS',
                               mandatory=True)

    if conf.env.TARGET_LINUX:
        conf.env.append_value('CXXFLAGS', ['-DGL_GLEXT_PROTOTYPES', '-DGLX_GLXEXT_PROTOTYPES'])
    if conf.env.TARGET_WINDOWS_64 or conf.env.TARGET_WINDOWS_32:
        conf.env.append_value('CXXFLAGS', ['-DWGL_WGLEXT_PROTOTYPES'])
    conf.env.append_value('CXXFLAGS', ['-DwxNO_UNSAFE_WXSTRING_CONV', '-DwxNO_IMPLICIT_WXSTRING_ENCODING'])

    if conf.options.static_wxwidgets:
        # wx-config returns its static libraries as full paths, without -l prefixes, which confuses
        # check_cfg().  It puts the static libraries into LINKFLAGS_WXWIDGETS, so fish them out.
        stlibs = []
        new_linkflags = []
        stlib_paths = []
        for f in conf.env.LINKFLAGS_WXWIDGETS:
            if f.startswith('/'):
                d = os.path.dirname(f)
                if not d in stlib_paths:
                    stlib_paths.append(d)
                stlibs.append(os.path.basename(f)[3:-2])
            else:
                new_linkflags.append(f)

        conf.env.STLIB_WXWIDGETS = stlibs
        conf.env.LINKFLAGS_WXWIDGETS = new_linkflags
        conf.env.STLIBPATH_WXWIDGETS = stlib_paths

    conf.in_msg = 1
    wx_version = conf.check_cfg(package='wxwidgets', path=wx_config, args='--version').strip()
    conf.in_msg = 0
    if not wx_version.startswith('3.'):
        conf.fatal('wxwidgets version 3.x.y is required; %s found' % wx_version)

    config = conf.check_cfg(package='wxwidgets', path=wx_config, args='--selected-config').strip()
    if config.find('gtk2') != -1:
        conf.check_cfg(package='gtk+-2.0', args='--cflags --libs', uselib_store='GTK', mandatory=True)

    try:
        conf.check_cfg(msg='Checking for RtAudio using pkg-config',
                       package='rtaudio',
                       args='--cflags --libs',
                       uselib_store='RTAUDIO',
                       mandatory=True)
    except:
        conf.check_cfg(msg='Checking for RtAudio headers using rtaudio-config',
                       package='',
                       path='rtaudio-config',
                       args='--cppflags',
                       uselib_store='RTAUDIO',
                       mandatory=True)

        conf.check_cfg(msg='Checking for RtAudio libraries using rtaudio-config',
                       package='',
                       path='rtaudio-config',
                       args='--libs',
                       uselib_store='RTAUDIO',
                       mandatory=True)

    # Some rtaudio-configs don't include rtaudio as a link library.  Go figure.
    conf.env.LIB_RTAUDIO.append('rtaudio')
    if conf.env.TARGET_WINDOWS_64 or conf.env.TARGET_WINDOWS_32:
        # Don't explicitly link with pthread on Windows
        conf.env.CFLAGS_RTAUDIO.remove('-pthread')
        conf.env.LINKFLAGS_RTAUDIO.remove('-pthread')
        # We need some libraries for WASAPI
        conf.env.LIB_RTAUDIO.append('mfplat')
        conf.env.LIB_RTAUDIO.append('mfuuid')
        conf.env.LIB_RTAUDIO.append('wmcodecdspuuid')

    if conf.env.TARGET_WINDOWS_64 or conf.env.TARGET_WINDOWS_32 or conf.env.TARGET_LINUX:
        conf.check_cfg(package='gl', args='--cflags --libs', uselib_store='GL', mandatory=True)
        conf.check_cfg(package='glu', args='--cflags --libs', uselib_store='GLU', mandatory=True)
        if conf.env.TARGET_WINDOWS_64 or conf.env.TARGET_WINDOWS_32:
            conf.check_cfg(package='glew', args='--cflags --libs', uselib_store='GLEW', mandatory=True)
    else:
        conf.env.STLIB_GL = 'gl'
        conf.env.STLIB_GLU = 'glu'

    if conf.env.TARGET_LINUX:
        conf.check_cxx(fragment="""
                                #include <wx/glcanvas.h>
                                #include <GL/glu.h>
                                #include <GL/glext.h>
                                #include <GL/glxext.h>
                                int main() {
                                    glXSwapIntervalEXT (0, 0, 1);
                                    return 0;
                                }
                                """,
                       msg='Checking for glXSwapIntervalEXT',
                       okmsg='yes',
                       uselib='GL WXWIDGETS',
                       define_name='DCPOMATIC_HAVE_GLX_SWAP_INTERVAL_EXT',
                       mandatory=False)


def build(bld):
    if bld.env.STATIC_DCPOMATIC:
        obj = bld(features='cxx cxxstlib')
    else:
        obj = bld(features='cxx cxxshlib')

    obj.name   = 'libdcpomatic2-wx'
    obj.export_includes = ['..']
    obj.uselib = 'BOOST_FILESYSTEM BOOST_THREAD BOOST_REGEX WXWIDGETS DCP SUB ZIP CXML RTAUDIO ICU AVUTIL '
    if bld.env.TARGET_LINUX:
        obj.uselib += 'GTK GL GLU '
    if bld.env.TARGET_WINDOWS_64 or bld.env.TARGET_WINDOWS_32:
        obj.uselib += 'WINSOCK2 OLE32 DSOUND WINMM KSUSER GL GLU GLEW '
    if bld.env.TARGET_OSX:
        obj.framework = ['CoreAudio', 'OpenGL']
    obj.use = 'libdcpomatic2'
    obj.source = sources
    obj.target = 'dcpomatic2-wx'

    i18n.po_to_mo(os.path.join('src', 'wx'), 'libdcpomatic2-wx', bld)
    # Extra wxWidgets .mo file (not installed by wxWidgets apparently) that contains some
    # of our own translations
    mo = os.path.join('mo', 'fa_IR', 'wxstd.mo')
    bld(rule='msgfmt -c ${SRC} -o ${TGT}', source=bld.path.make_node(os.path.join('..', '..', 'wx-po', 'fa_IR.po')), target=bld.path.get_bld().make_node(mo))
    bld.install_files(os.path.join('${PREFIX}', 'share', 'locale', 'fa_IR', 'LC_MESSAGES'), mo)

def pot(bld):
    i18n.pot(os.path.join('src', 'wx'), sources + " editable_list.h content_widget.h", 'libdcpomatic-wx')

def pot_merge(bld):
    i18n.pot_merge(os.path.join('src', 'wx'), 'libdcpomatic-wx')
