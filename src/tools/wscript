#
#    Copyright (C) 2012-2020 Carl Hetherington <cth@carlh.net>
#
#    This file is part of DCP-o-matic.
#
#    DCP-o-matic is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    DCP-o-matic is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with DCP-o-matic.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import glob
from waflib import Logs
import i18n

def configure(conf):
    if conf.env.TARGET_WINDOWS:
        conf.env.append_value('CXXFLAGS', ['-mconsole'])
        conf.env.append_value('LINKFLAGS', ['-mconsole'])

def build(bld):
    uselib =  'BOOST_THREAD BOOST_DATETIME DCP XMLSEC CXML XMLPP AVFORMAT AVFILTER AVCODEC '
    uselib += 'AVUTIL SWSCALE SWRESAMPLE POSTPROC CURL BOOST_FILESYSTEM SSH ZIP CAIROMM FONTCONFIG PANGOMM SUB '
    uselib += 'SNDFILE SAMPLERATE BOOST_REGEX ICU NETTLE RTAUDIO PNG LEQM_NRT '

    if bld.env.ENABLE_DISK:
        if bld.env.TARGET_LINUX:
            uselib += 'POLKIT '
        uselib += 'LWEXT4 NANOMSG '

    if bld.env.TARGET_WINDOWS:
        uselib += 'WINSOCK2 DBGHELP SHLWAPI MSWSOCK BOOST_LOCALE WINSOCK2 OLE32 DSOUND WINMM KSUSER SETUPAPI '
    if bld.env.TARGET_LINUX:
        uselib += 'DL '

    cli_tools = ['dcpomatic_cli', 'dcpomatic_server_cli', 'server_test', 'dcpomatic_kdm_cli', 'dcpomatic_create']
    if bld.env.ENABLE_DISK:
        cli_tools.append('dcpomatic_disk_writer')

    for t in cli_tools:
        obj = bld(features='cxx cxxprogram')
        obj.uselib = uselib
        obj.includes = ['..']
        obj.use    = ['libdcpomatic2']
        obj.source = '%s.cc' % t
        if bld.env.TARGET_WINDOWS and t == 'dcpomatic_disk_writer':
            obj.source += ' ../../platform/windows/%s.rc' % t
            # Prevent a console window opening when we start dcpomatic2_disk_writer
            obj.env.append_value('LINKFLAGS', '-Wl,-subsystem,windows')
        obj.target = t.replace('dcpomatic', 'dcpomatic2')
        if t == 'server_test':
            obj.install_path = None

    gui_tools = []
    if not bld.env.DISABLE_GUI:
        gui_tools = ['dcpomatic', 'dcpomatic_batch', 'dcpomatic_server', 'dcpomatic_kdm', 'dcpomatic_player', 'dcpomatic_playlist', 'dcpomatic_combiner']
        if bld.env.ENABLE_DISK:
            gui_tools.append('dcpomatic_disk')

    for t in gui_tools:
        obj = bld(features='cxx cxxprogram')
        obj.uselib = uselib
        if bld.env.BUILD_STATIC or bld.env.TARGET_LINUX:
            obj.uselib += ' GTK'
        obj.uselib += ' WXWIDGETS'
        if not bld.env.TARGET_OSX:
            obj.uselib += ' GL GLU'
        if bld.env.TARGET_LINUX:
            obj.uselib += ' X11'
        obj.includes = ['..']
        obj.use    = ['libdcpomatic2', 'libdcpomatic2-wx']
        obj.source = '%s.cc' % t
        if bld.env.TARGET_WINDOWS:
            obj.source += ' ../../platform/windows/%s.rc' % t
        obj.target = t.replace('dcpomatic', 'dcpomatic2')

    i18n.po_to_mo(os.path.join('src', 'tools'), 'dcpomatic2', bld)

def pot(bld):
    i18n.pot(os.path.join('src', 'tools'), 'dcpomatic.cc dcpomatic_batch.cc dcpomatic_kdm.cc dcpomatic_server.cc dcpomatic_player.cc dcpomatic_playlist.cc', 'dcpomatic')

def pot_merge(bld):
    i18n.pot_merge(os.path.join('src', 'tools'), 'dcpomatic')
