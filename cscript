# -*- mode: python -*-
#
#    Copyright (C) 2012-2015 Carl Hetherington <cth@carlh.net>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

import glob
import shutil
import os

deb_build_depends = {'debhelper': '8.0.0',
                     'python': '2.7.3',
                     'g++': '4:4.6.3',
                     'pkg-config': '0.26',
                     'libssh-dev': '0.5.2',
                     'libsndfile1-dev': '1.0.25',
                     'libgtk2.0-dev': '2.24.10'}

deb_depends = dict()

deb_depends['12.04'] = {'libc6': '2.15',
                        'libssh-4': '0.5.2',
                        'libboost-filesystem1.48.0': '1.48.0-3',
                        'libboost-thread1.48.0': '1.48.0-3',
                        'libboost-regex1.48.0': '1.48.0-3',
                        'libsndfile1': '1.0.25',
                        'libmagick++4': '8:6.6.9.7',
                        'libxml++2.6-2': '2.34.1',
                        'libgtk2.0-0': '2.24.10',
                        'libxmlsec1': '1.2.14-1.2build1',
                        'libxmlsec1-openssl': '1.2.14-1.2build1',
                        'libboost-date-time1.48.0': '1.48.0-3',
                        'libcurl3': '7.22.0-3ubuntu4',
                        'libzip2': '0.10-1ubuntu1',
                        'libsamplerate0': '0.1.8-4'}

deb_depends['14.04'] = {'libc6': '2.19-0ubuntu6',
                        'libssh-4': '0.6.1-0ubuntu3',
                        'libboost-filesystem1.54.0': '1.54.0-4ubuntu3',
                        'libboost-thread1.54.0': '1.54.0-4ubuntu3',
                        'libboost-regex1.54.0': '1.54.0-4ubuntu3',
                        'libsndfile1': '1.0.25-7ubuntu2',
                        'libmagick++5': '8:6.7.7.10-6ubuntu3',
                        'libxml++2.6-2': '2.36.0-2ubuntu1',
                        'libgtk2.0-0': '2.24.23-0ubuntu1',
                        'libxmlsec1': '1.2.18-2ubuntu1',
                        'libxmlsec1-openssl': '1.2.18-2ubuntu1',
                        'libboost-date-time1.54.0': '1.54.0-4ubuntu3',
                        'libcurl3': '7.35.0-1ubuntu2',
                        'libzip2': '0.10.1-1.2',
                        'libsamplerate0': '0.1.8-7'}

deb_depends['15.04'] = {'libc6': '2.21-0ubuntu4',
                        'libssh-4': '0.6.3-3ubuntu3',
                        'libboost-filesystem1.55.0': '1.55.0+dfsg-3ubuntu2',
                        'libboost-thread1.55.0': '1.55.0+dfsg-3ubuntu2',
                        'libboost-regex1.55.0': '1.55.0+dfsg-3ubuntu2',
                        'libsndfile1': '1.0.25-9.1',
                        'libmagick++-6.q16-5': '8:6.8.9.9-5',
                        'libxml++2.6-2': '2.36.0-2.1',
                        'libgtk2.0-0': '2.24.27-0ubuntu1',
                        'libxmlsec1': '1.2.20-2ubuntu2',
                        'libxmlsec1-openssl': '1.2.20-2ubuntu2',
                        'libboost-date-time1.55.0': '1.55.0+dfsg-3ubuntu2',
                        'libcurl3': '7.38.0-3ubuntu2',
                        'libzip2': '0.11.2-1.2',
                        'libwxgtk3.0-0': '3.0.2-1',
                        'libsamplerate0': '0.1.8-8'}

deb_depends['7'] = {'libc6': '2.13',
                    'libssh-4': '0.5.4',
                    'libboost-filesystem1.49.0': '1.49.0',
                    'libboost-thread1.49.0': '1.49.0',
                    'libboost-regex1.49.0': '1.49.0',
                    'libsndfile1': '1.0.25',
                    'libmagick++5': '8:6.7.7.10',
                    'libxml++2.6-2': '2.34.2',
                    'libgtk2.0-0': '2.24.10',
                    'libxmlsec1': '1.2.18',
                    'libboost-date-time1.49.0': '1.49.0',
                    'libxmlsec1-openssl': '1.2.18',
                    'libcurl3': '7.26.0',
                    'libzip2': '0.10.1',
                    'libcairomm-1.0-1': '1.10.0-1',
                    'libpangomm-1.4-1': '2.28.4-1',
                    'libsamplerate0': '0.1.8-5'}

deb_depends['8'] = {'libc6': '2.19-18',
                    'libssh-4': '0.6.3-4',
                    'libboost-filesystem1.55.0': '1.55.0',
                    'libboost-thread1.55.0': '1.55.0',
                    'libboost-date-time1.55.0': '1.55.0',
                    'libboost-regex1.55.0': '1.55.0',
                    'libsndfile1': '1.0.25-9.1',
                    'libmagick++-6.q16-5': '8:6.8.9.9-5',
                    'libxml++2.6-2': '2.36.0',
                    'libgtk2.0-0': '2.24.25',
                    'libxmlsec1': '1.2.20',
                    'libxmlsec1-openssl': '1.2.20',
                    'libcurl3': '7.38.0',
                    'libzip2': '0.11.2',
                    'libwxgtk3.0-0': '3.0.2',
                    'libxcb-xfixes0': '1.10',
                    'libxcb-shape0': '1.10',
                    'libsamplerate0': '0.1.8-8'}

deb_depends['unstable'] = {'libc6': '2.13',
                    'libssh-4': '0.5.4',
                    'libboost-filesystem1.55.0': '1.55.0',
                    'libboost-thread1.55.0': '1.55.0',
                    'libboost-regex1.55.0': '1.55.0',
                    'libsndfile1': '1.0.25',
                    'libmagick++5': '8:6.7.7.10',
                    'libxml++2.6-2': '2.34.2',
                    'libgtk2.0-0': '2.24.10',
                    'libxmlsec1': '1.2.18',
                    'libboost-date-time1.55.0': '1.55.0',
                    'libxmlsec1-openssl': '1.2.18',
                    'libcurl3': '7.26.0',
                    'libzip2': '0.10.1',
                    'libsamplerate0': '0.1.8-8'}

def packages(name, packages, f):
    s = '%s: ' % name
    for p in packages:
        s += str(p) + ', '
    print >>f,s[:-2]

def make_control(debian_version, bits, filename, debug):
    f = open(filename, 'w')
    print >>f,'Source: dcpomatic'
    print >>f,'Section: video'
    print >>f,'Priority: extra'
    print >>f,'Maintainer: Carl Hetherington <carl@dcpomatic.com>'
    packages('Build-Depends', deb_build_depends, f)
    print >>f,'Standards-Version: 3.9.3'
    print >>f,'Homepage: http://dcpomatic.com/'
    print >>f,''
    print >>f,'Package: dcpomatic'
    if bits == 32:
        print >>f,'Architecture: i386'
    else:
        print >>f,'Architecture: amd64'

    packages('Depends', deb_depends[debian_version], f)

    print >>f,'Description: Generator of Digital Cinema Packages (DCPs)'
    print >>f,'  DCP-o-matic generates Digital Cinema Packages (DCPs) from video and audio'
    print >>f,'  files (such as those from DVDs or Blu-Rays) for presentation on DCI-compliant'
    print >>f,'  digital projectors.'

    if debug:
        print >>f,''
        print >>f,'Package: dcpomatic-dbg'
        if bits == 32:
            print >>f,'Architecture: i386'
        else:
            print >>f,'Architecture: amd64'
        print >>f,'Section: debug'
        print >>f,'Priority: extra'
        packages('Depends', deb_depends[debian_version], f)
        print >>f,'Description: debugging symbols for dcpomatic'
        print >>f,'  This package contains the debugging symbols for dcpomatic.'
        print >>f,''

def make_spec(filename, version, target):
    """Make a .spec file for a RPM build"""
    f = open(filename, 'w')
    print >>f,'Summary:A program that generates Digital Cinema Packages (DCPs) from video and audio files'
    print >>f,'Name:dcpomatic2'
    print >>f,'Version:%s' % version
    print >>f,'Release:1%{?dist}'
    print >>f,'License:GPL'
    print >>f,'Group:Applications/Multimedia'
    print >>f,'URL:http://dcpomatic.com/'
    print >>f,'Requires: ImageMagick-c++, glibmm24, libzip'
    print >>f,''
    print >>f,'%description'
    print >>f,'DCP-o-matic generates Digital Cinema Packages (DCPs) from video and audio '
    print >>f,'files (such as those from DVDs or Blu-Rays) for presentation on DCI-compliant '
    print >>f,'digital projectors.'
    print >>f,''
    print >>f,'%files'
    print >>f,'%{_bindir}/dcpomatic2'
    print >>f,'%{_bindir}/dcpomatic2_batch'
    print >>f,'%{_bindir}/dcpomatic2_cli'
    print >>f,'%{_bindir}/dcpomatic2_create'
    print >>f,'%{_bindir}/dcpomatic2_kdm'
    print >>f,'%{_bindir}/dcpomatic2_server'
    print >>f,'%{_bindir}/dcpomatic2_server_cli'
    print >>f,'%{_datadir}/applications/dcpomatic2.desktop'
    print >>f,'%{_datadir}/applications/dcpomatic2_batch.desktop'
    print >>f,'%{_datadir}/applications/dcpomatic2_server.desktop'
    print >>f,'%{_datadir}/dcpomatic2/taskbar_icon.png'
    print >>f,'%{_datadir}/dcpomatic2/LiberationSans-Regular.ttf'
    print >>f,'%{_datadir}/dcpomatic2/splash.png'
    for r in ['128x128', '22x22', '32x32', '48x48', '64x64']:
        print >>f,'%%{_datadir}/icons/hicolor/%s/apps/dcpomatic2.png' % r
    for l in ['de_DE', 'es_ES', 'fr_FR', 'it_IT', 'sv_SE', 'nl_NL', 'ru_RU', 'pl_PL', 'da_DK']:
        print >>f,'%%{_datadir}/locale/%s/LC_MESSAGES/dcpomatic2.mo' % l
        print >>f,'%%{_datadir}/locale/%s/LC_MESSAGES/libdcpomatic2-wx.mo' % l
        print >>f,'%%{_datadir}/locale/%s/LC_MESSAGES/libdcpomatic2.mo' % l
    print >>f,''
    print >>f,'%prep'
    print >>f,'rm -rf $RPM_BUILD_DIR/dcpomatic-%s' % version
    print >>f,'tar xjf $RPM_SOURCE_DIR/dcpomatic-%s.tar.bz2' % version
    print >>f,'%build'
    print >>f,'cd dcpomatic-%s' % version
    print >>f,'export PKG_CONFIG_PATH=%s/lib/pkgconfig:/usr/local/lib/pkgconfig' % target.directory
    print >>f,'CXXFLAGS="-I%s/include" LDFLAGS="-L%s/lib" ./waf configure --prefix=%%{buildroot}/usr --install-prefix=/usr %s' % (target.directory, target.directory, configure_options(target))
    print >>f,'./waf'
    print >>f,'%install'
    print >>f,'cd dcpomatic-%s' % version
    print >>f,'./waf install'
    print >>f,''
    print >>f,'%post'
    print >>f,'/bin/touch --no-create %{_datadir}/icons/hicolor &>/dev/null || :'
    print >>f,''
    print >>f,'%postun'
    print >>f,'if [ $1 -eq 0 ] ; then'
    print >>f,'    /bin/touch --no-create %{_datadir}/icons/hicolor &>/dev/null'
    print >>f,'    /usr/bin/gtk-update-icon-cache %{_datadir}/icons/hicolor &>/dev/null || :'
    print >>f,'fi'
    print >>f,''
    print >>f,'%posttrans'
    print >>f,'/usr/bin/gtk-update-icon-cache %{_datadir}/icons/hicolor &>/dev/null || :'

def dependencies(target):

    if target.platform == 'linux':
        ffmpeg_options = { 'shared': False }
    else:
        ffmpeg_options = {}

    return (('ffmpeg-cdist', '0e27b2b', ffmpeg_options),
            ('libdcp', 'v1.2.4'),
            ('libsub', 'v1.1.5'))

def configure_options(target):
    opt = ''
    if target.debug:
        opt += ' --enable-debug'
    if target.platform == 'windows':
        opt += ' --target-windows'
    elif target.platform == 'linux':
        opt += ' --static-dcpomatic --static-openjpeg --static-wxwidgets --static-ffmpeg --static-dcp --static-sub --static-cxml'
        if target.distro == 'centos':
            opt += ' --static-xmlsec --static-ssh --disable-tests'
            if target.version == '6.5':
                opt += ' --static-boost --static-xmlpp'
            elif target.version == '7':
                opt += ' --workaround-gssapi --static-xmlpp'

    return opt

def build(target, options):
    target.command('./waf configure --prefix=%s %s' % (target.directory, configure_options(target)))
    target.command('./waf')

    if target.platform == 'linux' or target.platform == 'osx':
        target.command('./waf install')

def package_windows(target):
    shutil.copyfile('build/platform/windows/installer.%s.nsi' % target.bits, 'build/platform/windows/installer2.%s.nsi' % target.bits)
    target.command('sed -i "s~%%resources%%~%s/platform/windows~g" build/platform/windows/installer2.%s.nsi' % (os.getcwd(), target.bits))
    target.command('sed -i "s~%%graphics%%~%s/graphics~g" build/platform/windows/installer2.%s.nsi' % (os.getcwd(), target.bits))
    target.command('sed -i "s~%%static_deps%%~%s~g" build/platform/windows/installer2.%s.nsi' % (target.windows_prefix, target.bits))
    target.command('sed -i "s~%%cdist_deps%%~%s~g" build/platform/windows/installer2.%s.nsi' % (target.directory, target.bits))
    target.command('sed -i "s~%%mingw%%~%s~g" build/platform/windows/installer2.%s.nsi' % (target.mingw_path, target.bits))
    target.command('sed -i "s~%%binaries%%~%s/build~g" build/platform/windows/installer2.%s.nsi' % (os.getcwd(), target.bits))
    target.command('sed -i "s~%%bits%%~32~g" build/platform/windows/installer2.%s.nsi' % target.bits)
    target.command('makensis build/platform/windows/installer2.%s.nsi' % target.bits)
    return os.path.abspath(glob.glob('build/platform/windows/*%s*.exe' % target.bits)[0])

def package_debian(target, cpu, version):
    make_control(target.version, target.bits, 'debian/control', target.debug)
    target.command('./waf dist')
    f = open('debian/files', 'w')
    print >>f,'dcpomatic_%s-1_%s.deb video extra' % (version, cpu)
    shutil.rmtree('build/deb', ignore_errors=True)

    os.makedirs('build/deb')
    os.chdir('build/deb')
    shutil.move('../../dcpomatic-%s.tar.bz2' % version, 'dcpomatic_%s.orig.tar.bz2' % version)
    target.command('tar xjf dcpomatic_%s.orig.tar.bz2' % version)
    os.chdir('dcpomatic-%s' % version)
    target.command('dch -b -v %s-1 "New upstream release."' % version)
    target.set('CDIST_LINKFLAGS', target.get('LINKFLAGS'))
    target.set('CDIST_CXXFLAGS', target.get('CXXFLAGS'))
    target.set('CDIST_PKG_CONFIG_PATH', target.get('PKG_CONFIG_PATH'))

    target.set('CDIST_CONFIGURE', '"' + configure_options(target) + '"')
    if target.debug:
        target.set('CDIST_DEBUG_PACKAGE', '--dbg-package=dcpomatic-dbg')
    if target.version == '15.04' or target.version == '8':
        target.set('CDIST_LOCALE_PREFIX', '/usr/share/locale')
    else:
        target.set('CDIST_LOCALE_PREFIX', '/usr/local/share/locale')

    target.command('dpkg-buildpackage -uc -us')

    debs = []
    for p in glob.glob('../*.deb'):
        debs.append(os.path.abspath(p))

    return debs

def package_centos(target, cpu, version):
    topdir = os.path.realpath('build/rpmbuild')
    os.makedirs('%s/BUILD' % topdir)
    os.makedirs('%s/RPMS' % topdir)
    os.makedirs('%s/SOURCES' % topdir)
    os.makedirs('%s/SPECS' % topdir)
    os.makedirs('%s/SRPMS' % topdir)

    target.command('./waf dist')
    shutil.copyfile(
        "%s/src/dcpomatic/dcpomatic-%s.tar.bz2" % (target.directory, version),
        "%s/SOURCES/dcpomatic-%s.tar.bz2" % (topdir, version)
        )

    make_spec('build/platform/linux/dcpomatic2.spec', version, target)
    target.command('rpmbuild --define \'_topdir %s\' -bb build/platform/linux/dcpomatic2.spec' % topdir)
    rpms = []

    if cpu == "amd64":
        cpu = "x86_64"
    else:
        cpu = "i686"

    for p in glob.glob('%s/RPMS/%s/*.rpm' % (topdir, cpu)):
        rpms.append(os.path.abspath(p))

    return rpms

def package(target, version):
    if target.platform == 'windows':
        return package_windows(target)
    elif target.platform == 'linux':
        if target.bits == 32:
    	    cpu = 'i386'
        else:
            cpu	= 'amd64'

	if target.distro == 'debian' or target.distro == 'ubuntu':
            return package_debian(target, cpu, version)
        elif target.distro == 'centos':
            return package_centos(target, cpu, version)
    elif target.platform == 'osx':
        target.command('bash platform/osx/make_dmg.sh %s' % target.directory)
        return os.path.abspath(glob.glob('build/platform/osx/DCP-o-matic*.dmg')[0])

def make_pot(target):
    target.command('./waf pot')
    return [os.path.abspath('build/src/lib/libdcpomatic.pot'),
            os.path.abspath('build/src/wx/libdcpomatic-wx.pot'),
	    os.path.abspath('build/src/tools/dcpomatic.pot')]

def make_manual(target):
    os.chdir('doc/manual')
    target.command('make')
    target.command('pdflatex colour.tex')
    return [os.path.abspath('pdf'), os.path.abspath('html'), os.path.abspath('colour.pdf')]

def test(target):
    if target.platform != 'windows':
        target.set('LC_ALL', 'C')
        target.command('run/tests')
