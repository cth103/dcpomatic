#!/usr/bin/python3

import sys
import bs4
import termcolor

inside = False
xml = ''
for l in sys.stdin.readlines():
    if l.startswith('<Metadata>'):
        inside = True
    elif l.startswith('</Metadata'):
        inside = False
    if inside:
        xml += l

def note(k, v, highlight=None):
    if highlight is not None and highlight(v):
        print('%20s: %s' % (k, termcolor.colored(v, 'white', 'on_red')));
    else:
        print('%20s: %s' % (k, v))

def bool_note(k, v, highlight=None):
    v = 'yes' if (v is not None and v.text == "1") else 'no'
    note(k, v, highlight)

def dcp_time(s):
    global dcp_rate
    raw = int(s.text)
    f = raw * dcp_rate / 96000.0
    s = f // dcp_rate
    f -= s * dcp_rate
    m = s // 60
    s -= m * 60
    h = m // 60
    m -= h * 60
    return '%s DCP_%02d:%02d:%02d.%02d' % (str(raw).ljust(8), h, m, s, f)


def content_time_from_frames(s, r):
    raw = int(s.text)
    f = raw
    s = f // r
    f -= s * r
    m = s // 60
    s -= m * 60
    h = m // 60
    m -= h * 60
    return '%s Con_%02d:%02d:%02d.%02d' % (str(raw).ljust(8), h, m, s, f)

soup = bs4.BeautifulSoup(xml, 'xml')
note('Name', soup.Metadata.Name.text)
note('Container', soup.Metadata.Container.text)
note('J2K bandwidth', soup.Metadata.J2KBandwidth.text, lambda x: int(x) < 20000000 or int(x) > 235000000)
note('Video frame rate', soup.Metadata.VideoFrameRate.text, lambda x: int(x) not in [24, 25, 30])
dcp_rate = int(soup.Metadata.VideoFrameRate.text)
note('Audio channels', soup.Metadata.AudioChannels.text)
bool_note('3D', soup.Metadata.ThreeD, lambda x: not x)
bool_note('Encrypted', soup.Metadata.ThreeD, lambda x: not x)
reel_types = ['single', 'by-video', 'by-length']
note('Reel type', reel_types[int(soup.ReelType.text)])
for content in soup.Metadata.Playlist.children:
    if isinstance(content, bs4.element.Tag):
        print()
        note('  Type', content.Type.text)
        note('  Position', dcp_time(content.Position))
        note('  Trim start', content.TrimStart.text)
        note('  Trim end', content.TrimEnd.text)
        if content.VideoFrameRate:
            note('  Video rate', content.VideoFrameRate.text)
            note('  Video length', content_time_from_frames(content.VideoLength, float(content.VideoFrameRate.text)))
        if content.AudioFrameRate:
            note('  Audio rate', content.AudioFrameRate.text)
        bool_note('  Reference video', content.ReferenceVideo, lambda x: not x)
        bool_note('  Reference audio', content.ReferenceAudio, lambda x: not x)
        bool_note('  Reference subtitle', content.ReferenceSubtitle, lambda x: not x)
        for stream in content.find_all('AudioStream'):
            note(' Audio stream length', stream.Length.text)
